{
	// Place your hoang-ha-mobile workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"React Native Component": {
		"prefix": "rnc",
		"body": [
		  "import React, { Component } from 'react'",
		  "import { Text, View } from 'react-native'",
		  "",
		  "export default class ${1:componentName} extends Component {",
		  "  render() {",
		  "    return (",
		  "      <View>",
		  "        <Text> ${2:textInComponent} </Text>",
		  "      </View>",
		  "    )",
		  "  }",
		  "}"
		]
	  },
	  "React Native Component Export": {
		"prefix": "rnce",
		"body": [
		  "import React, { Component } from 'react'",
		  "import { Text, View } from 'react-native'",
		  "",
		  "class ${1:componentName} extends Component {",
		  "  render() {",
		  "    return (",
		  "      <View>",
		  "        <Text> ${2:textInComponent} </Text>",
		  "      </View>",
		  "    )",
		  "  }",
		  "}",
		  "",
		  "export default ${1:componentName}"
		]
	  },
	  "React Native Class Component Redux": {
		"prefix": "rncredux",
		"body": [
		  "import React, { Component } from 'react'",
		  "import { View, Text } from 'react-native'",
		  "import PropTypes from 'prop-types'",
		  "import { connect } from 'react-redux'",
		  "",
		  "class ${1:componentName} extends Component {",
		  "  static propTypes = {",
		  "    ${2:prop}: ${3:PropTypes}",
		  "  }",
		  "",
		  "  render() {",
		  "    return (",
		  "      <View>",
		  "        <Text> ${2:textInComponent} </Text>",
		  "      </View>",
		  "    )",
		  "  }",
		  "}",
		  "",
		  "const mapStateToProps = (state) => ({",
		  "  ",
		  "})",
		  "",
		  "const mapDispatchToProps = {",
		  "  ",
		  "}",
		  "",
		  "export default connect(mapStateToProps, mapDispatchToProps)(${1:componentName})",
		  ""
		],
		"description": "Creates a React Native component class with PropTypes with connected redux and ES7 module system"
	  },
	  "React Native Functional Component": {
		"prefix": "rnfc",
		"body": [
		  "import React from 'react';",
		  "import { View, Text } from 'react-native';",
		  "",
		  "export default function ${1:componentName}() {",
		  "  return (",
		  "    <View>",
		  "      <Text>$0</Text>",
		  "     </View>",
		  "  );",
		  "}",
		  ""
		],
		"description": "Creates a React Native functional component"
	  },

	  "React Native Functional Component Screen": {
		"prefix": "rnfs",
		"body": [
		  "import React from 'react';",
		  "import { View } from 'react-native';",
		  "import { Text } from '@rneui/themed';",
		  "import { Header, Wrapper } from '@/components';",
		  "import { NativeStackScreenProps } from '@react-navigation/native-stack';",
		  "import { mainStackParamList } from '@/navigation/types';",
		  "import useStyles from './styles';",
		  "",
		  "interface ${1:componentName}Props extends NativeStackScreenProps<mainStackParamList, '${1:componentName}'> {}",
		  "",
		  "const ${1:componentName}: React.FC<${1:componentName}Props> = ({ navigation, route }) => {",
		  "  const styles = useStyles()",
		  "  return (",
		  "    <Wrapper isSafe>",
		  "      <Header title='' />",
		  "      <View style={styles.container}>",
		  "        <Text>${1:componentName}</Text>",
		  "      </View>",
		  "     </Wrapper>",
		  "  );",
		  "}",
		  "",
		  "export default ${1:componentName}"

		],
		"description": "Creates a React Native functional component"
	  },
	  "React Native Functional Component ": {
		"prefix": "rnfe",
		"body": [
		  "import React from 'react';",
		  "import { View } from 'react-native';",
		  "import { Text } from '@rneui/themed';",
		  "import useStyles from './styles';",
		  "",
		  "const ${1:componentName} = () => {",
		  "  const styles = useStyles()",
		  "  return (",
		  "    <View style={styles.container}>",
		  "      <Text>${1:componentName}</Text>",
		  "    </View>",
		  "  );",
		  "}",
		  "",
		  "export default ${1:componentName}"

		],
		"description": "Creates a React Native functional component"
	  },
	  "React Native Import": {
		"prefix": "imrn",
		"body": "import { ${1:moduleName} } from 'react-native'"
	  },
	  "React Native Style Element": {
		"prefix": "rnse",
		"body": [
			"import { makeStyles } from '@rneui/themed';",
			"",
			"const useStyles = makeStyles(theme => ({",
			"  container: { flex: 1, backgroundColor: 'transparent' },",
			"}));",
			"",
			"export default useStyles;"
		]
	  }	,
	  "React Native Style Screen": {
		"prefix": "rnss",
		"body": [
			"import { makeStyles } from '@rneui/themed';",
			"",
			"const useStyles = makeStyles(theme => ({",
			"  container: { flex: 1, paddingHorizontal: 20 },",
			"}));",
			"",
			"export default useStyles;"
		]
	  }	,
	  "React Native Style": {
		"prefix": "rnstyle",
		"body": [
			"import { StyleSheet } from 'react-native';",
			"",
			"const styles = StyleSheet.create({",
			"",
			"})",
			"",
			"export default styles"
		]
	  }	
}